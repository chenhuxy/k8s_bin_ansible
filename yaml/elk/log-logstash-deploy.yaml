---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: loging
data:
  logstash.conf: |+
    input {
          kafka {
              type => "app"
              bootstrap_servers => "10.58.133.14:9092,10.58.133.38:9092,10.58.133.39:9092"
              topics => ["app-qoros-test"]
              auto_offset_reset => "latest"
              consumer_threads => 5
              decorate_events => true
              codec => json   #这里配置进行json解析
          }
          kafka {
              type => "tsp"
              bootstrap_servers => "10.58.133.14:9092,10.58.133.38:9092,10.58.133.39:9092"
              topics => ["tsp-qoros-test"]
              auto_offset_reset => "latest"
          }
          kafka {
              type => "k8s"
              bootstrap_servers => "10.58.133.14:9092,10.58.133.38:9092,10.58.133.39:9092"
              topics => ["k8s-qoros-test"]
              auto_offset_reset => "latest"
              consumer_threads => 5
              decorate_events => true
              codec => json   #这里配置进行json解析
          }
          kafka {
              type => "nginx"
              bootstrap_servers => "10.58.133.14:9092,10.58.133.38:9092,10.58.133.39:9092"
              topics => ["nginx"]
              auto_offset_reset => "latest"
              codec => json   #这里配置进行json解析
          }

      }

      filter {

      #       json {
      #                source => "message"
      #        }

        if [type] == "k8s" {
          mutate {
              gsub => ["message","\u001b\[[m;\d]*",""]
          }
          grok {
              match => {"message" => "(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(\.\d{3})+??) %{DATA:prog} (?<level>(\[)?[A-Z]+(\])?.*?) %{GREEDYDATA:message}"}
              add_tag => ["app_java"]
          }
          grok {
              add_tag => ["app_ingress-nginx-access"]
          }
          grok {
              match => {"message" => "(?<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}?) %{GREEDYDATA:message}"}
              add_tag => ["app_ingress-nginx-error"]
          }
        }
        if [type] == "app" {
          grok {
              match => {"message" => "(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(\.\d{3})+??) %{DATA:prog} (?<level>(\[)?[A-Z]+(\])?.*?) %{GREEDYDATA:message}"}
              add_tag => ["app_java"]
          }
        }
        if [type] =~ "nginx.*" {
          grok {
              add_tag => ["app_nginx-access"]
          }
          grok {
              match => {"message" => "(?<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}?) %{GREEDYDATA:message}"}
              add_tag => ["app_nginx-error"]
          }
        }
      }

      output {
          if [type] == "app" {
              elasticsearch {
                  #hosts => ["10.58.133.23:9200","10.58.133.44:9200","10.58.133.45:9200"]
                  hosts => ["elasticsearch-service-http:9200"]
                  index => "app-qoros-test-%{+YYYY-MM-dd}"
                  document_type => "log"
                  timeout => 300
              }
          }
          if [type] == "tsp" {
              elasticsearch {
                  #hosts => ["10.58.133.23:9200","10.58.133.44:9200","10.58.133.45:9200"]
                  hosts => ["elasticsearch-service-http:9200"]
                  index => "tsp-qoros-test-%{+YYYY-MM-dd}"
                  document_type => "log"
                  timeout => 300
              }
          }
          if [type] == "k8s" {
              elasticsearch {
                  #hosts => ["10.58.133.23:9200","10.58.133.44:9200","10.58.133.45:9200"]
                  hosts => ["elasticsearch-service-http:9200"]
                  index => "k8s-qoros-test-%{+YYYY-MM-dd}"
                  document_type => "log"
                  timeout => 300
              }
          }
          if [type] == "nginx" {
              elasticsearch {
                  #hosts => ["10.58.133.23:9200","10.58.133.44:9200","10.58.133.45:9200"]
                  hosts => ["elasticsearch-service-http:9200"]
                  index => "nginx-qoros-test-%{+YYYY-MM-dd}"
                  document_type => "log"
                  timeout => 300
              }
          }

      }

---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    elastic-app: logstash
  name: logstash
  namespace: loging
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      elastic-app: logstash
  template:
    metadata:
      labels:
        elastic-app: logstash
    spec:
      containers:
        - name: logstash
          image: hub.qoros.com/library/logstash:7.2.0
          volumeMounts:
            - mountPath: /usr/share/logstash/pipeline
              name: logstash-conf-volume
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: "XPACK_MONITORING_ENABLED"
              value: "false"
            - name: "XPACK_MONITORING_ELASTICSEARCH_URL"
              value: "http://elasticsearch-service-http:9200"
          securityContext:
            privileged: true
      volumes:
        - name: logstash-conf-volume
          configMap:
            name: logstash-config
      #tolerations:
      #  - key: node-role.kubernetes.io/master
      #    effect: NoSchedule

---
kind: Service
apiVersion: v1
metadata:
  labels:
    elastic-app: logstash
  name: logstash-service
  namespace: loging
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    elastic-app: logstash
  type: NodePort
