apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |-
    apiVersion: 1
    deleteDatasources:
    - name: Prometheus
      orgId: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      orgId: 1
      uid: my_unique_uid
      url: http://prometheus:9090
      password:
      user:
      database:
      basicAuth:
      basicAuthUser:
      basicAuthPassword:
      withCredentials:
      isDefault:
      jsonData:
        graphiteVersion: '1.1'
        tlsAuth: false
        tlsAuthWithCACert: false
      secureJsonData:
        tlsCACert: '...'
        tlsClientCert: '...'
        tlsClientKey: '...'
        password:
        basicAuthPassword:
      version: 1
      editable: false    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
      # <string> an unique provider name. Required
    - name: 'a unique provider name'
      # <int> Org id. Default to 1
      orgId: 1
      # <string> name of the dashboard folder.
      folder: ''
      # <string> folder UID. will be automatically generated if not specified
      folderUid: ''
      # <string> provider type. Default to 'file'
      type: file
      # <bool> disable dashboard deletion
      disableDeletion: false
      # <bool> enable dashboard editing
      editable: true
      # <int> how often Grafana will scan for changed dashboards
      updateIntervalSeconds: 10
      # <bool> allow updating provisioned dashboards from the UI
      allowUiUpdates: false
      options:
        # <string, required> path to dashboard files on disk. Required when using the 'file' type
        path: /var/lib/grafana/dashboards-files
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  serviceName: grafana
  selector:
    matchLabels:
      k8s-app: grafana
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: grafana
    spec:
      containers:
      - name: grafana
        #image: grafana/grafana:6.0.0
        image: hub.qoros.com/library/grafana:6.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/grafana/
          name: grafana-storage
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-config-datasources
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-config-dashboards
        env:
#        - name: GF_PATHS_PROVISIONING
#          value: /var/lib/grafana/provisioning
#        - name: INFLUXDB_HOST
#          value: monitoring-influxdb
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
          # The following env variables are required to make Grafana accessible via
          # the kubernetes api-server proxy. On production clusters, we recommend
          # removing these env variables, setup auth for grafana, and expose the grafana
          # service using a LoadBalancer or a public IP.
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
#        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
#          value: Admin
        - name: GF_SERVER_ROOT_URL
          # If you're only using the API Server proxy, set this value instead:
          # value: /api/v1/namespaces/kube-system/services/monitoring-grafana/proxy
#          value: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
          value: "/"
#          name: GF_SERVER_SERVER_FROM_SUB_PATH
#          value: "true"
#      initContainers:
#      - name: "init-chown-data"
#        image: "busybox:latest"
#        imagePullPolicy: "IfNotPresent"
#        command: ["chmod", "-R", "777", "/var/lib/grafana/"]
#        volumeMounts:
#        - name: grafana-storage
#          mountPath: /var/lib/grafana/
#          subPath: "" 
      volumes:
      - name: grafana-config-datasources
        configMap:
           name: grafana-datasources
      - name: grafana-config-dashboards
        configMap:
           name: grafana-dashboards
#      nodeSelector:
#        nodeRole: "monitor"
      tolerations:
      - key: "node-role.kubernetes.io/master"
        effect: "NoSchedule"
  volumeClaimTemplates:
   - metadata:
       name: grafana-storage
     spec:
       accessModes: ["ReadWriteOnce"]
       storageClassName: "managed-nfs-storage"
       resources:
         requests:
           storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
    # If you are NOT using this as an addon, you should comment out this line.
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: grafana
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/tcp-probe: 'true'
    prometheus.io/tcp-probe-port: '80'
  name: grafana
  namespace: monitoring
spec:
  type: NodePort
  # In a production setup, we recommend accessing Grafana through an external Loadbalancer
  # or through a public IP.
  # type: LoadBalancer
  # You could also use NodePort to expose the service at a randomly-generated port
  # type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    #nodePort: 30002
  selector:
    k8s-app: grafana
---

